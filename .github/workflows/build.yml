name: CI

on: [push, pull_request]

jobs:
  pre_job:
    # continue-on-error: true # Uncomment once integration is finished
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v5
        with:
          # All of these options are optional, so you can remove them if you are happy with the defaults
          concurrent_skipping: 'same_content_newer'
          skip_after_successful_duplicate: 'false'

  native:
    name: build
    needs: pre_job
    if: needs.pre_job.outputs.should_skip != 'true'
    runs-on: windows-2019
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Get cmake
        uses: lukka/get-cmake@latest
      - name: Add msbuild to PATH
        # This works with 2017+
        uses: microsoft/setup-msbuild@v1.1
      - name: Restore artifacts, or setup vcpkg (do not install any package)
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: f6a5d4e8eb7476b8d7fc12a56dff300c1c986131
      - name: Override PortFile
        uses: DamianReeves/write-file-action@master
        with:
          path: .\vcpkg\ports\commonlibsse-ng\portfile.cmake
          contents: |
            vcpkg_from_github(
              OUT_SOURCE_PATH SOURCE_PATH
              REPO alandtse/CommonLibVR
              REF 2b983f5281bfadd26ee20787390d2513e8ffe38a
              SHA512  ad8a935b38be29390036caff1ceffb9c774f0ba358f6806df5d99ae8f563897bbca0f7e2ecaf951f8047d29c060fbbd7d5458eaa2a924839d7b05ea42af16d34
              HEAD_REF ng
            )
            
            vcpkg_configure_cmake(
                    SOURCE_PATH "${SOURCE_PATH}"
                    PREFER_NINJA
                    OPTIONS -DBUILD_TESTS=off -DSKSE_SUPPORT_XBYAK=on
            )
            
            vcpkg_install_cmake()
            vcpkg_cmake_config_fixup(PACKAGE_NAME CommonLibSSE CONFIG_PATH lib/cmake)
            vcpkg_copy_pdbs()
            
            file(GLOB CMAKE_CONFIGS "${CURRENT_PACKAGES_DIR}/share/CommonLibSSE/CommonLibSSE/*.cmake")
            file(INSTALL ${CMAKE_CONFIGS} DESTINATION "${CURRENT_PACKAGES_DIR}/share/CommonLibSSE")
            file(INSTALL "${SOURCE_PATH}/cmake/CommonLibSSE.cmake" DESTINATION "${CURRENT_PACKAGES_DIR}/share/CommonLibSSE")
            
            file(REMOVE_RECURSE "${CURRENT_PACKAGES_DIR}/debug/include")
            file(REMOVE_RECURSE "${CURRENT_PACKAGES_DIR}/share/CommonLibSSE/CommonLibSSE")
            
            file(
                INSTALL "${SOURCE_PATH}/LICENSE"
                DESTINATION "${CURRENT_PACKAGES_DIR}/share/${PORT}"
                RENAME copyright)   
      - name: Run CMake consuming CMakePreset.json and vcpkg.json by mean of vcpkg.
        uses: lukka/run-cmake@v10
        with:
          # configurePreset: build-release-msvc
          # buildPreset: release-msvc
          configurePreset: build-release-withdebuginfo-msvc
          buildPreset: release-withdebuginfo-msvc       
      - name: Copy Plugin
        shell: bash
        run: |
          mkdir contrib/Distribution/Plugin || exit 1
          shopt -s nullglob
          root_folder=""
          if [ -d contrib/Distribution/PluginRelease ]; then
            root_folder=contrib/Distribution/PluginRelease
          elif [ -d contrib/Distribution/PluginDebug ]; then
            root_folder=contrib/Distribution/PluginDebug
          fi
          if [ -n "${root_folder}" ]; then
            cp "${root_folder}"/*.dll contrib/Distribution/Plugin/
            ls -la "${root_folder}"/
            ls -la "${root_folder}"/*.pdb
            pdbs=( "${root_folder}"/*.pdb )
            if [ "${#pdbs[@]}" -gt 0 ]; then
              cp "${pdbs[@]}" contrib/
            fi
          fi
          if [ -d contrib/Distribution/PluginRelease ]; then
            rm -rf "contrib/Distribution/PluginRelease"
          elif [ -d contrib/Distribution/PluginDebug ]; then
            rm -rf "contrib/Distribution/PluginDebug"
          fi
          shopt -u nullglob
      - uses: actions/upload-artifact@v2
        name: Upload package
        with:
          name: GTSPlugin
          path: "contrib/Distribution/*"
      - uses: actions/upload-artifact@v2
        name: Upload debug info
        with:
          name: GTSPluginDebugInfo
          path: "contrib/*.pdb"
      - uses: actions/upload-artifact@v2
        name: Update compile_commands.json
        with:
          name: "Compiled File Data"
          path: "compile_commands.json"